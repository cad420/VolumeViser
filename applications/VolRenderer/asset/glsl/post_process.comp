#version 460 core
layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

layout(rgba32f, binding = 0) uniform readonly image2D Accumulate;
layout(rgba8, binding = 1) uniform writeonly image2D Display;

layout(std140, binding = 0) uniform Params{
    int ToneMapping;
    float InvExposure;
};


const float rWeight[3] = { 3.240479f, -1.537150f, -0.498535f };
const float gWeight[3] = {-0.969256f,  1.875991f,  0.041556f };
const float bWeight[3] = { 0.055648f, -0.204043f,  1.057311f };

void main() {
    ivec2 res = imageSize(Accumulate);
    ivec2 g_index = ivec2(gl_WorkGroupSize.xy * gl_WorkGroupID.xy + gl_LocalInvocationID.xy);
    if (g_index.x >= res.x || g_index.y >= res.y){
        return;
    }

    vec4 xyz = imageLoad(Accumulate, g_index);

    vec4 color = xyz;

    if(bool(ToneMapping)){
        color.r =	rWeight[0] * xyz.x +
        rWeight[1] * xyz.y +
        rWeight[2] * xyz.z;

        color.g =	gWeight[0] * xyz.x +
        gWeight[1] * xyz.y +
        gWeight[2] * xyz.z;

        color.b =	bWeight[0] * xyz.x +
        bWeight[1] * xyz.y +
        bWeight[2] * xyz.z;
    }


    color.r = clamp(1.f - exp(- color.r * InvExposure), 0.f, 1.f);
    color.g = clamp(1.f - exp(- color.g * InvExposure), 0.f, 1.f);
    color.b = clamp(1.f - exp(- color.b * InvExposure), 0.f, 1.f);

    color.a = 1.0;

    color = pow(color, vec4(1.0 / 2.2));

    imageStore(Display, g_index, color);
}
